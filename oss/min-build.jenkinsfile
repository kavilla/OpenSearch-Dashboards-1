lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
        IMAGE_RPM = 'opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-build-v2' // required for rpm to create digest sha256 correctly with rpm 4.12+
    }
    parameters {
        string(
            name: 'VERSION',
            description: 'Version of OpenSearch Dashboards you want to override in the package.json file.',
            trim: true
        )
        string(
            name: 'BRANCH',
            description: 'Branch of the version you want to build OpenSearch Dashboards.',
            trim: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label AGENT_X64
                    image 'alpine:3'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    currentBuild.description = "$INPUT_MANIFEST"
                    dockerAgent = detectDockerAgent()
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-linux-x64-tar') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            build
                            yarn build-platform --linux --skip-os-packages --release
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_TAR = artifactUrl
                            env.INDEX_FILE_PATH = buildManifestObj.getIndexFileRoot("${JOB_NAME}")

                            echo "buildManifestUrl (x64, tar): ${buildManifestUrl}"
                            echo "artifactUrl (x64, tar): ${artifactUrl}"
                        }
                    }
                }
                stage('build-linux-arm64-tar') {
                    agent { label AGENT_X64 }
                    stages {
                        stage('build-archive-linux-arm64-tar') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'tar',
                                        stashName: "build-archive-linux-arm64-tar-${JOB_NAME}-${BUILD_NUMBER}"
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('update index file') {
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    uploadIndexFile(
                        indexFilePath: env.INDEX_FILE_PATH
                    )
                }
            }
        }
        stage('docker build') {
            when {
                beforeAgent true
                expression { 
                    params.BUILD_DOCKER != 'do_not_build_docker'
                }
            }
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    echo "env.ARTIFACT_URL_X64_TAR: ${env.ARTIFACT_URL_X64_TAR}"
                    echo "env.ARTIFACT_URL_ARM64_TAR: ${env.ARTIFACT_URL_ARM64_TAR}"
                    
                    buildDockerImage(
                        inputManifest: "manifests/${INPUT_MANIFEST}",
                        buildNumber: "${BUILD_NUMBER}",
                        buildOption: "${BUILD_DOCKER}",
                        artifactUrlX64: env.ARTIFACT_URL_X64_TAR,
                        artifactUrlArm64: env.ARTIFACT_URL_ARM64_TAR
                    )
                }
            }
        }
    }
    post {
        success {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        def stashed = lib.jenkins.Messages.new(this).get([
                            'build-and-test-linux-x64-tar',
                            // 'assemble-archive-and-test-linux-x64-rpm',
                            // 'assemble-archive-and-test-linux-arm64-tar',
                            // 'assemble-archive-and-test-linux-arm64-rpm',
                        ])

                        publishNotification(
                            icon: ':white_check_mark:',
                            message: 'Successful Build',
                            extra: stashed,
                            credentialsId: 'BUILD_NOTICE_WEBHOOK',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        publishNotification(
                            icon: ':warning:',
                            message: 'Failed Build',
                            credentialsId: 'BUILD_NOTICE_WEBHOOK',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
    }
}

